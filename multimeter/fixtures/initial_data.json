[{"model": "multimeter.account", "pk": 1, "fields": {"password": "pbkdf2_sha256$100000$LYlM9orVqf1g$r9rBrpgX3qmW8E1LdmqeRTJ5DwBx+xE3jRA4Jj52yYo=", "last_login": "2019-05-19T05:43:19.488Z", "is_superuser": true, "username": "admin", "first_name": "John", "last_name": "Doe", "email": "admin@admin.com", "is_staff": true, "is_active": true, "date_joined": "2018-11-11T10:22:13Z", "second_name": "\u0420\u043e\u043c\u0430\u043d\u043e\u0432\u0438\u0447", "birthday": null, "country": null, "groups": [], "user_permissions": [], "participations": []}}, {"model": "multimeter.account", "pk": 679, "fields": {"password": "pbkdf2_sha256$100000$NLuGmpYuMFoy$UCH26qrlkt90b0FeMobNugL8ZoRFqF5qkHpgu3DXucA=", "last_login": null, "is_superuser": true, "username": "jacques.zac", "first_name": "jacques", "last_name": "zac", "email": "jacques.zac@generated.com", "is_staff": false, "is_active": true, "date_joined": "2019-02-18T16:11:04.712Z", "second_name": "", "birthday": null, "country": null, "groups": [], "user_permissions": [], "participations": []}}, {"model": "multimeter.account", "pk": 680, "fields": {"password": "pbkdf2_sha256$100000$IMRc7jzPKckT$YabomyEmuef4ZHFpPqlRopcxe07TYaHgmYAUlqMOGhU=", "last_login": null, "is_superuser": true, "username": "klaus.wayne", "first_name": "klaus", "last_name": "wayne", "email": "klaus.wayne@generated.com", "is_staff": false, "is_active": true, "date_joined": "2019-02-18T16:11:04.781Z", "second_name": "", "birthday": null, "country": null, "groups": [], "user_permissions": [], "participations": []}}, {"model": "multimeter.account", "pk": 681, "fields": {"password": "pbkdf2_sha256$100000$2bNu6pgTvFAV$eBwvyf3BNcCqq1xrnQu99Fc4pgE6inMqw/2Z8KESbsk=", "last_login": null, "is_superuser": true, "username": "john.emet", "first_name": "john", "last_name": "emet", "email": "john.emet@generated.com", "is_staff": false, "is_active": true, "date_joined": "2019-02-18T16:11:04.850Z", "second_name": "", "birthday": null, "country": null, "groups": [], "user_permissions": [], "participations": []}}, {"model": "multimeter.account", "pk": 682, "fields": {"password": "pbkdf2_sha256$100000$FBTObAOXxxhK$ckqWdJNsReJ4pxL9ADc01utLDyX3ruxr0o2Wk/85rh8=", "last_login": null, "is_superuser": true, "username": "diarmuid.randall", "first_name": "diarmuid", "last_name": "randall", "email": "diarmuid.randall@generated.com", "is_staff": false, "is_active": true, "date_joined": "2019-02-18T16:11:04.918Z", "second_name": "", "birthday": null, "country": null, "groups": [], "user_permissions": [], "participations": []}}, {"model": "multimeter.account", "pk": 683, "fields": {"password": "pbkdf2_sha256$100000$w3RMA1Yujx19$nlZZqoGmVZBEOj0NHJbAYcBsaj68w48uuK4duwrl14s=", "last_login": null, "is_superuser": true, "username": "zak.burt", "first_name": "zak", "last_name": "burt", "email": "zak.burt@generated.com", "is_staff": false, "is_active": true, "date_joined": "2019-02-18T16:11:04.984Z", "second_name": "", "birthday": null, "country": null, "groups": [], "user_permissions": [], "participations": []}}, {"model": "multimeter.account", "pk": 684, "fields": {"password": "pbkdf2_sha256$100000$pYFaKnRfwSm6$8+mukyKhoKdZgek1JYsCbH8zJe81xFXfo0gVfQn72Wg=", "last_login": null, "is_superuser": true, "username": "patrick.fabio", "first_name": "patrick", "last_name": "fabio", "email": "patrick.fabio@generated.com", "is_staff": false, "is_active": true, "date_joined": "2019-02-18T16:11:05.052Z", "second_name": "", "birthday": null, "country": null, "groups": [], "user_permissions": [], "participations": []}}, {"model": "multimeter.account", "pk": 685, "fields": {"password": "pbkdf2_sha256$100000$0NZPLsTZDq6i$wjLIseHxEu/X8wszagpZkfrsBA8xIvuypmEhjRTkwl8=", "last_login": null, "is_superuser": true, "username": "fionn.evan", "first_name": "fionn", "last_name": "evan", "email": "fionn.evan@generated.com", "is_staff": false, "is_active": true, "date_joined": "2019-02-18T16:11:05.120Z", "second_name": "", "birthday": null, "country": null, "groups": [], "user_permissions": [], "participations": []}}, {"model": "multimeter.account", "pk": 686, "fields": {"password": "pbkdf2_sha256$100000$dMiE08EPlI0G$pfsofEfqstcc6XKW6S5r4Yje4pG75A+2xBmQNSLB59o=", "last_login": null, "is_superuser": true, "username": "darragh.rex", "first_name": "darragh", "last_name": "rex", "email": "darragh.rex@generated.com", "is_staff": false, "is_active": true, "date_joined": "2019-02-18T16:11:05.190Z", "second_name": "", "birthday": null, "country": null, "groups": [], "user_permissions": [], "participations": []}}, {"model": "multimeter.account", "pk": 687, "fields": {"password": "pbkdf2_sha256$100000$2pOJOtlOdm3R$r5/eb0zJvLhTuje2ltZO3MLVf96UaHndlfEK9dKFpec=", "last_login": null, "is_superuser": true, "username": "norman.myles", "first_name": "norman", "last_name": "myles", "email": "norman.myles@generated.com", "is_staff": false, "is_active": true, "date_joined": "2019-02-18T16:11:05.258Z", "second_name": "", "birthday": null, "country": null, "groups": [], "user_permissions": [], "participations": []}}, {"model": "multimeter.account", "pk": 688, "fields": {"password": "pbkdf2_sha256$100000$bYP5e8XbVYdt$xxtsZqowKwGgXKO+SUvfn7C3K586DKoDMkqJL/hHwg0=", "last_login": null, "is_superuser": true, "username": "ainsley.waylon", "first_name": "ainsley", "last_name": "waylon", "email": "ainsley.waylon@generated.com", "is_staff": false, "is_active": true, "date_joined": "2019-02-18T16:11:05.324Z", "second_name": "", "birthday": null, "country": null, "groups": [], "user_permissions": [], "participations": []}}, {"model": "multimeter.account", "pk": 689, "fields": {"password": "pbkdf2_sha256$100000$ykFPvKY1zkvb$lkkggJuWoKfLjwPIkT5EHQIbmdYRoZOF18PVa+Ooheo=", "last_login": null, "is_superuser": true, "username": "raylan.guillermo", "first_name": "raylan", "last_name": "guillermo", "email": "raylan.guillermo@generated.com", "is_staff": false, "is_active": true, "date_joined": "2019-02-18T16:11:05.392Z", "second_name": "", "birthday": null, "country": null, "groups": [], "user_permissions": [], "participations": []}}, {"model": "multimeter.contest", "pk": 31, "fields": {"brief_name": "Contest", "full_name": "asdasda", "statements": "s", "rules": "", "start": "2018-10-24T00:00:00Z", "stop": "2018-06-06T00:00:00Z", "freeze": null, "personal_rules": false, "command_rules": false, "guest_access": false, "participant_access": false, "show_tests": false, "show_results": false, "owner": 1, "maintainers": [679, 680, 681]}}, {"model": "multimeter.problem", "pk": 15, "fields": {"codename": "\u041f\u0440\u0435\u0434\u0432\u044b\u0431\u043e\u0440\u043d\u044b\u0435 \u043e\u0431\u0435\u0449\u0430\u043d\u0438\u044f", "input_file": "", "output_file": "", "author": 1, "time_limit": 0, "memory_limit": 0, "last_modified": "2019-05-16T14:28:24.777Z", "checker": "", "checker_lang": null}}, {"model": "multimeter.problem", "pk": 20, "fields": {"codename": "\u041f\u043e\u0436\u0430\u0440\u043d\u0430\u044f \u043e\u0445\u0440\u0430\u043d\u0430", "input_file": "fire.in", "output_file": "fire.out", "author": 1, "time_limit": 2, "memory_limit": 64, "last_modified": "2019-05-16T14:24:00.562Z", "checker": "#include \"testlib.h\"\n#include <sstream>\n\nusing namespace std;\n\nint main(int argc, char * argv[])\n{\n    setName(\"compare ordered sequences of signed int%d numbers\", 8 * sizeof(long long));\n\n    registerTestlibCmd(argc, argv);\n\n    int n = 0;\n    string firstElems;\n\n    while (!ans.seekEof() && !ouf.seekEof())\n    {\n        n++;\n        long long j = ans.readLong();\n        long long p = ouf.readLong();\n        if (j != p)\n            quitf(_wa, \"%d%s numbers differ - expected: '%s', found: '%s'\", n, englishEnding(n).c_str(), vtos(j).c_str(), vtos(p).c_str());\n        else\n            if (n <= 5)\n            {\n                if (firstElems.length() > 0)\n                    firstElems += \" \";\n                firstElems += vtos(j);\n            }\n    }\n\n    int extraInAnsCount = 0;\n\n    while (!ans.seekEof())\n    {\n        ans.readLong();\n        extraInAnsCount++;\n    }\n    \n    int extraInOufCount = 0;\n\n    while (!ouf.seekEof())\n    {\n        ouf.readLong();\n        extraInOufCount++;\n    }\n\n    if (extraInAnsCount > 0)\n        quitf(_wa, \"Answer contains longer sequence [length = %d], but output contains %d elements\", n + extraInAnsCount, n);\n    \n    if (extraInOufCount > 0)\n        quitf(_wa, \"Output contains longer sequence [length = %d], but answer contains %d elements\", n + extraInOufCount, n);\n    \n    if (n <= 5)\n        quitf(_ok, \"%d number(s): \\\"%s\\\"\", n, compress(firstElems).c_str());\n    else\n        quitf(_ok, \"%d numbers\", n);\n}\n", "checker_lang": null}}, {"model": "multimeter.problem", "pk": 21, "fields": {"codename": "\u041b\u0430\u0431\u0438\u0440\u0438\u043d\u0442", "input_file": "labyrinth.in", "output_file": "labyrinth.out", "author": 1, "time_limit": 2, "memory_limit": 64, "last_modified": "2019-05-16T14:24:00.570Z", "checker": "#include \"testlib.h\"\n#include <cmath>\n\nusing namespace std;\n\nconst double EPS = 1E-6;\n\nint main(int argc, char * argv[])\n{\n    setName(\"compare two sequences of doubles, max absolute or relative  error = %.7lf\", EPS);\n    registerTestlibCmd(argc, argv);\n\n    int n = 0;\n    double j, p;\n\n    while (!ans.seekEof()) \n    {\n        n++;\n        j = ans.readDouble();\n        p = ouf.readDouble();\n        if (!doubleCompare(j, p, EPS))\n        {\n            quitf(_wa, \"%d%s numbers differ - expected: '%.7lf', found: '%.7lf', error = '%.7lf'\",\n                n, englishEnding(n).c_str(), j, p, doubleDelta(j, p));\n        }\n    }\n\n    if (n == 1)\n        quitf(_ok, \"found '%.7lf', expected '%.7lf', error '%.7lf'\", p, j, doubleDelta(j, p));\n\n    quitf(_ok, \"%d numbers\", n);\n}\n", "checker_lang": null}}, {"model": "multimeter.problem", "pk": 22, "fields": {"codename": "\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043b\u044b\u0436", "input_file": "skis.in", "output_file": "skis.out", "author": 1, "time_limit": 2, "memory_limit": 256, "last_modified": "2019-05-16T14:24:00.576Z", "checker": "#include \"testlib.h\"\n#include <cmath>\n\nusing namespace std;\n\nconst double EPS = 1E-6;\n\nint main(int argc, char * argv[])\n{\n    setName(\"compare two sequences of doubles, max absolute or relative  error = %.7lf\", EPS);\n    registerTestlibCmd(argc, argv);\n\n    int n = 0;\n    double j, p;\n\n    while (!ans.seekEof()) \n    {\n        n++;\n        j = ans.readDouble();\n        p = ouf.readDouble();\n        if (!doubleCompare(j, p, EPS))\n        {\n            quitf(_wa, \"%d%s numbers differ - expected: '%.7lf', found: '%.7lf', error = '%.7lf'\",\n                n, englishEnding(n).c_str(), j, p, doubleDelta(j, p));\n        }\n    }\n\n    if (n == 1)\n        quitf(_ok, \"found '%.7lf', expected '%.7lf', error '%.7lf'\", p, j, doubleDelta(j, p));\n\n    quitf(_ok, \"%d numbers\", n);\n}\n", "checker_lang": null}}, {"model": "multimeter.problem", "pk": 23, "fields": {"codename": "\u0420\u043e\u043c\u0431\u043e\u0432\u0438\u0434\u043d\u0430\u044f \u043f\u043b\u0438\u0442\u043a\u0430", "input_file": "tiles.in", "output_file": "tiles.out", "author": 1, "time_limit": 2, "memory_limit": 64, "last_modified": "2019-05-16T14:24:00.614Z", "checker": "#include \"testlib.h\"\n#include <sstream>\n\nusing namespace std;\n\nint main(int argc, char * argv[])\n{\n    setName(\"compare ordered sequences of signed int%d numbers\", 8 * sizeof(long long));\n\n    registerTestlibCmd(argc, argv);\n\n    int n = 0;\n    string firstElems;\n\n    while (!ans.seekEof() && !ouf.seekEof())\n    {\n        n++;\n        long long j = ans.readLong();\n        long long p = ouf.readLong();\n        if (j != p)\n            quitf(_wa, \"%d%s numbers differ - expected: '%s', found: '%s'\", n, englishEnding(n).c_str(), vtos(j).c_str(), vtos(p).c_str());\n        else\n            if (n <= 5)\n            {\n                if (firstElems.length() > 0)\n                    firstElems += \" \";\n                firstElems += vtos(j);\n            }\n    }\n\n    int extraInAnsCount = 0;\n\n    while (!ans.seekEof())\n    {\n        ans.readLong();\n        extraInAnsCount++;\n    }\n    \n    int extraInOufCount = 0;\n\n    while (!ouf.seekEof())\n    {\n        ouf.readLong();\n        extraInOufCount++;\n    }\n\n    if (extraInAnsCount > 0)\n        quitf(_wa, \"Answer contains longer sequence [length = %d], but output contains %d elements\", n + extraInAnsCount, n);\n    \n    if (extraInOufCount > 0)\n        quitf(_wa, \"Output contains longer sequence [length = %d], but answer contains %d elements\", n + extraInOufCount, n);\n    \n    if (n <= 5)\n        quitf(_ok, \"%d number(s): \\\"%s\\\"\", n, compress(firstElems).c_str());\n    else\n        quitf(_ok, \"%d numbers\", n);\n}\n", "checker_lang": null}}, {"model": "multimeter.problem", "pk": 24, "fields": {"codename": "Gnome Sort", "input_file": "", "output_file": "", "author": 681, "time_limit": 1000, "memory_limit": 64, "last_modified": "2019-05-16T14:25:37.625Z", "checker": "", "checker_lang": null}}, {"model": "multimeter.problem", "pk": 25, "fields": {"codename": "Telephone Number", "input_file": "", "output_file": "", "author": 681, "time_limit": 1000, "memory_limit": 64, "last_modified": "2019-05-16T14:26:47.601Z", "checker": "", "checker_lang": null}}, {"model": "multimeter.problemtext", "pk": 159, "fields": {"problem": 15, "language": "english", "text_type": 4, "text": "asdas22"}}, {"model": "multimeter.problemtext", "pk": 160, "fields": {"problem": 15, "language": "english", "text_type": 5, "text": "1212222222222222"}}, {"model": "multimeter.problemtext", "pk": 161, "fields": {"problem": 15, "language": "english", "text_type": 1, "text": "asdas"}}, {"model": "multimeter.problemtext", "pk": 162, "fields": {"problem": 15, "language": "english", "text_type": 2, "text": "23123123"}}, {"model": "multimeter.contestproblem", "pk": 767, "fields": {"code": "a", "contest": 31, "problem": 25}}, {"model": "multimeter.contestproblem", "pk": 768, "fields": {"code": "b", "contest": 31, "problem": 22}}, {"model": "multimeter.subtask", "pk": 1, "fields": {"problem": 15, "number": 123123, "scoring": "PRT", "results": "ERR"}}, {"model": "multimeter.tag", "pk": 1, "fields": {"tag": "probabilities", "problems": [22]}}, {"model": "multimeter.tag", "pk": 2, "fields": {"tag": "formula", "problems": [23, 22]}}, {"model": "multimeter.tag", "pk": 3, "fields": {"tag": "linearity of expectation", "problems": [22]}}]